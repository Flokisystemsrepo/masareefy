import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import {
  Settings as SettingsIcon,
  User,
  Bell,
  Shield,
  Globe,
  Crown,
  CreditCard,
  Calendar,
  Check,
  Download,
  RefreshCw,
  Save,
  Mail,
  Phone,
  MapPin,
  Building,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { brandSettingsAPI, subscriptionAPI } from "@/services/api";
import { useSubscription } from "@/contexts/SubscriptionContext";
import { useAuth } from "@/contexts/AuthContext";
import { useLanguage } from "@/contexts/LanguageContext";
import { useNavigate, useParams } from "react-router-dom";

interface UserProfile {
  firstName: string;
  lastName: string;
  email: string;
  phone?: string;
  profilePictureUrl?: string;
  company?: string;
  address?: string;
}

interface BrandSettings {
  brandName: string;
  reportHeader: string;
  reportFooter: string;
  logoUrl?: string;
}

interface NotificationSettings {
  email: boolean;
  push: boolean;
  reports: boolean;
  updates: boolean;
  marketing: boolean;
}

const Settings: React.FC = () => {
  const { t, isRTL } = useLanguage();
  const { user } = useAuth();
  const { subscription, refreshSubscription } = useSubscription();
  const navigate = useNavigate();
  const { brandId } = useParams();

  const [activeTab, setActiveTab] = useState("profile");
  const [loading, setLoading] = useState(false);
  const [availablePlans, setAvailablePlans] = useState<any[]>([]);
  const [plansLoading, setPlansLoading] = useState(false);
  const { toast } = useToast();

  // Profile state
  const [profile, setProfile] = useState<UserProfile>({
    firstName: "Zoz",
    lastName: "Emad",
    email: user?.email || "ziz@gmail.com",
    phone: "",
    profilePictureUrl: "",
    company: "",
    address: "",
  });

  // Brand settings state
  const [brandSettings, setBrandSettings] = useState<BrandSettings>({
    brandName: "Your Brand",
    reportHeader: "Financial Report",
    reportFooter: "Generated by Your Brand Management System",
    logoUrl: "",
  });

  // Notification settings state
  const [notifications, setNotifications] = useState<NotificationSettings>({
    email: true,
    push: true,
    reports: true,
    updates: false,
    marketing: false,
  });

  const settingsTabs = [
    { id: "profile", label: "Profile", icon: User },
    { id: "notifications", label: "Notifications", icon: Bell },
    { id: "security", label: "Security", icon: Shield },
    { id: "brand", label: "Brand", icon: Building },
    { id: "subscription", label: "Subscription", icon: Crown },
  ];

  useEffect(() => {
    loadPlans();
  }, []);

  const loadPlans = async () => {
    try {
      setPlansLoading(true);
      const response = await subscriptionAPI.getPlans();
      if (response && Array.isArray(response)) {
        setAvailablePlans(response);
      }
    } catch (error) {
      console.error("Failed to load plans:", error);
    } finally {
      setPlansLoading(false);
    }
  };

  const handlePlanChange = async (planId: string) => {
    try {
      setLoading(true);

      if (
        subscription &&
        subscription.id !== "fallback" &&
        subscription.status === "active"
      ) {
        const response = await subscriptionAPI.updateSubscription(
          subscription.id,
          { planId: planId }
        );

        if (response.success) {
          toast({
            title: "Success",
            description: "Plan updated successfully!",
          });
          await refreshSubscription();
        } else {
          throw new Error(response.error || "Failed to update plan");
        }
      } else {
        const response = await subscriptionAPI.createSubscription({
          planId: planId,
          paymentMethod: "mock",
        });

        if (response.success) {
          toast({
            title: "Success",
            description: "Plan activated successfully!",
          });
          await refreshSubscription();
        } else {
          throw new Error(response.error || "Failed to activate plan");
        }
      }
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to change plan",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const saveProfile = async () => {
    try {
      setLoading(true);
      // Save profile logic here
      toast({
        title: "Success",
        description: "Profile updated successfully!",
      });
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to update profile",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const saveBrandSettings = async () => {
    try {
      setLoading(true);
      if (brandId) {
        await brandSettingsAPI.update(brandId, brandSettings);
      }
      localStorage.setItem("brandSettings", JSON.stringify(brandSettings));
      toast({
        title: "Success",
        description: "Brand settings saved successfully!",
      });
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to save brand settings",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const saveNotifications = async () => {
    try {
      setLoading(true);
      // Save notification settings logic here
      toast({
        title: "Success",
        description: "Notification settings saved successfully!",
      });
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to save notification settings",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const renderProfileTab = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <User className="h-5 w-5" />
            Personal Information
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="firstName">First Name</Label>
              <Input
                id="firstName"
                value={profile.firstName}
                onChange={(e) =>
                  setProfile((prev) => ({ ...prev, firstName: e.target.value }))
                }
                placeholder="Enter your first name"
              />
            </div>
            <div>
              <Label htmlFor="lastName">Last Name</Label>
              <Input
                id="lastName"
                value={profile.lastName}
                onChange={(e) =>
                  setProfile((prev) => ({ ...prev, lastName: e.target.value }))
                }
                placeholder="Enter your last name"
              />
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="email">Email Address</Label>
              <Input
                id="email"
                value={profile.email}
                disabled
                className="bg-gray-50"
              />
              <p className="text-xs text-gray-500 mt-1">
                Contact support to change email address
              </p>
            </div>
            <div>
              <Label htmlFor="phone">Phone Number</Label>
              <Input
                id="phone"
                value={profile.phone}
                onChange={(e) =>
                  setProfile((prev) => ({ ...prev, phone: e.target.value }))
                }
                placeholder="Enter your phone number"
              />
            </div>
          </div>
          <div>
            <Label htmlFor="profilePicture">Profile Picture URL</Label>
            <Input
              id="profilePicture"
              value={profile.profilePictureUrl}
              onChange={(e) =>
                setProfile((prev) => ({
                  ...prev,
                  profilePictureUrl: e.target.value,
                }))
              }
              placeholder="https://example.com/your-picture.jpg"
            />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="company">Company</Label>
              <Input
                id="company"
                value={profile.company}
                onChange={(e) =>
                  setProfile((prev) => ({ ...prev, company: e.target.value }))
                }
                placeholder="Enter your company name"
              />
            </div>
            <div>
              <Label htmlFor="address">Address</Label>
              <Input
                id="address"
                value={profile.address}
                onChange={(e) =>
                  setProfile((prev) => ({ ...prev, address: e.target.value }))
                }
                placeholder="Enter your address"
              />
            </div>
          </div>
          <Button onClick={saveProfile} disabled={loading} className="w-full">
            {loading ? (
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <Save className="h-4 w-4 mr-2" />
            )}
            Save Profile Changes
          </Button>
        </CardContent>
      </Card>
    </div>
  );

  const renderNotificationsTab = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bell className="h-5 w-5" />
            Notification Preferences
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-4">
            {Object.entries(notifications).map(([key, value]) => (
              <div
                key={key}
                className="flex items-center justify-between p-4 border rounded-lg"
              >
                <div>
                  <h4 className="font-medium text-gray-900 capitalize">
                    {key.replace(/([A-Z])/g, " $1").trim()}
                  </h4>
                  <p className="text-sm text-gray-500">
                    {key === "email" &&
                      "Receive email notifications about important updates"}
                    {key === "push" &&
                      "Receive push notifications in your browser"}
                    {key === "reports" &&
                      "Get notified when reports are generated"}
                    {key === "updates" &&
                      "Receive system updates and maintenance notifications"}
                    {key === "marketing" &&
                      "Receive promotional emails and product updates"}
                  </p>
                </div>
                <Button
                  variant={value ? "default" : "outline"}
                  size="sm"
                  onClick={() =>
                    setNotifications((prev) => ({
                      ...prev,
                      [key]: !value,
                    }))
                  }
                >
                  {value ? "On" : "Off"}
                </Button>
              </div>
            ))}
          </div>
          <Button
            onClick={saveNotifications}
            disabled={loading}
            className="w-full"
          >
            {loading ? (
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <Save className="h-4 w-4 mr-2" />
            )}
            Save Notification Settings
          </Button>
        </CardContent>
      </Card>
    </div>
  );

  const renderSecurityTab = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            Security Settings
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-4">
            <div className="p-4 border rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">
                Change Password
              </h4>
              <p className="text-sm text-gray-500 mb-4">
                Update your password to keep your account secure
              </p>
              <Button variant="outline" className="w-full">
                <Shield className="h-4 w-4 mr-2" />
                Change Password
              </Button>
            </div>
            <div className="p-4 border rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">
                Two-Factor Authentication
              </h4>
              <p className="text-sm text-gray-500 mb-4">
                Add an extra layer of security to your account
              </p>
              <Button variant="outline" className="w-full">
                <Shield className="h-4 w-4 mr-2" />
                Enable 2FA
              </Button>
            </div>
            <div className="p-4 border rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">Login Sessions</h4>
              <p className="text-sm text-gray-500 mb-4">
                Manage your active login sessions across devices
              </p>
              <Button variant="outline" className="w-full">
                <Shield className="h-4 w-4 mr-2" />
                View Sessions
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderBrandTab = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Building className="h-5 w-5" />
            Brand Information
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="brandName">Brand Name</Label>
              <Input
                id="brandName"
                value={brandSettings.brandName}
                onChange={(e) =>
                  setBrandSettings((prev) => ({
                    ...prev,
                    brandName: e.target.value,
                  }))
                }
                placeholder="Enter your brand name"
              />
            </div>
            <div>
              <Label htmlFor="logoUrl">Logo URL</Label>
              <Input
                id="logoUrl"
                value={brandSettings.logoUrl}
                onChange={(e) =>
                  setBrandSettings((prev) => ({
                    ...prev,
                    logoUrl: e.target.value,
                  }))
                }
                placeholder="https://example.com/logo.png"
              />
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="reportHeader">Report Header Text</Label>
              <Input
                id="reportHeader"
                value={brandSettings.reportHeader}
                onChange={(e) =>
                  setBrandSettings((prev) => ({
                    ...prev,
                    reportHeader: e.target.value,
                  }))
                }
                placeholder="Financial Report"
              />
            </div>
            <div>
              <Label htmlFor="reportFooter">Report Footer Text</Label>
              <Input
                id="reportFooter"
                value={brandSettings.reportFooter}
                onChange={(e) =>
                  setBrandSettings((prev) => ({
                    ...prev,
                    reportFooter: e.target.value,
                  }))
                }
                placeholder="Generated by Your Brand"
              />
            </div>
          </div>
          <Button
            onClick={saveBrandSettings}
            disabled={loading}
            className="w-full"
          >
            {loading ? (
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <Save className="h-4 w-4 mr-2" />
            )}
            Save Brand Settings
          </Button>
        </CardContent>
      </Card>
    </div>
  );

  const renderSubscriptionTab = () => (
    <div className="space-y-6">
      {/* Current Plan */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Crown className="h-5 w-5" />
            Current Subscription
          </CardTitle>
        </CardHeader>
        <CardContent>
          {subscription ? (
            <div className="space-y-6">
              {/* Plan Overview */}
              <div className="flex items-center justify-between p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                <div className="flex items-center gap-4">
                  <div className="p-3 bg-blue-100 rounded-full">
                    <Crown className="h-6 w-6 text-blue-600" />
                  </div>
                  <div>
                    <h3 className="font-bold text-xl text-blue-900">
                      {subscription.plan.name}
                    </h3>
                    <p className="text-blue-700 font-medium">
                      ${subscription.plan.priceMonthly}/month
                    </p>
                  </div>
                </div>
                <div className="text-right">
                  <Badge
                    variant={
                      subscription.status === "active"
                        ? "default"
                        : subscription.status === "expired"
                        ? "destructive"
                        : "secondary"
                    }
                    className="text-sm px-3 py-1"
                  >
                    {subscription.status === "active"
                      ? "Active"
                      : subscription.status === "expired"
                      ? "Expired"
                      : subscription.status}
                  </Badge>
                  {subscription.isExpired && (
                    <p className="text-xs text-red-600 mt-1">Action Required</p>
                  )}
                </div>
              </div>

              {/* Billing Information */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="p-4 bg-gray-50 rounded-lg">
                  <div className="flex items-center gap-2 mb-2">
                    <CreditCard className="h-4 w-4 text-gray-600" />
                    <span className="text-sm font-medium text-gray-700">
                      Billing Cycle
                    </span>
                  </div>
                  <p className="text-lg font-semibold text-gray-900">
                    {(subscription as any).billingCycle || "Monthly"}
                  </p>
                  <p className="text-xs text-gray-500">Renews automatically</p>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg">
                  <div className="flex items-center gap-2 mb-2">
                    <Calendar className="h-4 w-4 text-gray-600" />
                    <span className="text-sm font-medium text-gray-700">
                      Next Billing
                    </span>
                  </div>
                  <p className="text-lg font-semibold text-gray-900">
                    {(subscription as any).nextBillingDate
                      ? new Date(
                          (subscription as any).nextBillingDate
                        ).toLocaleDateString()
                      : "N/A"}
                  </p>
                  <p className="text-xs text-gray-500">
                    {(subscription as any).nextBillingDate
                      ? `${Math.ceil(
                          (new Date(
                            (subscription as any).nextBillingDate
                          ).getTime() -
                            new Date().getTime()) /
                            (1000 * 60 * 60 * 24)
                        )} days remaining`
                      : "No billing date set"}
                  </p>
                </div>
              </div>

              {/* Usage Information */}
              <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                <h4 className="font-medium text-green-900 mb-3">Plan Usage</h4>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">
                      {(subscription as any).usage?.inventory || 0}
                    </p>
                    <p className="text-xs text-green-700">Products</p>
                    <p className="text-xs text-green-600">
                      / {(subscription.plan as any).limits?.inventory || "∞"}
                    </p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">
                      {(subscription as any).usage?.revenue || 0}
                    </p>
                    <p className="text-xs text-green-700">Revenue Entries</p>
                    <p className="text-xs text-green-600">
                      / {(subscription.plan as any).limits?.revenue || "∞"}
                    </p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">
                      {(subscription as any).usage?.costs || 0}
                    </p>
                    <p className="text-xs text-green-700">Cost Entries</p>
                    <p className="text-xs text-green-600">
                      / {(subscription.plan as any).limits?.costs || "∞"}
                    </p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">
                      {(subscription as any).usage?.reports || 0}
                    </p>
                    <p className="text-xs text-green-700">Reports</p>
                    <p className="text-xs text-green-600">
                      / {(subscription.plan as any).limits?.reports || "∞"}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="p-4 bg-gray-100 rounded-full w-20 h-20 mx-auto mb-4 flex items-center justify-center">
                <Crown className="h-10 w-10 text-gray-400" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                No Active Subscription
              </h3>
              <p className="text-gray-600 mb-6 max-w-md mx-auto">
                Get started with a plan to unlock all features and start
                managing your business finances.
              </p>
              <Button
                onClick={() => loadPlans()}
                className="bg-blue-600 hover:bg-blue-700"
              >
                <Crown className="h-4 w-4 mr-2" />
                Choose a Plan
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Available Plans */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CreditCard className="h-5 w-5" />
            Available Plans
          </CardTitle>
        </CardHeader>
        <CardContent>
          {plansLoading ? (
            <div className="flex justify-center py-8">
              <RefreshCw className="h-6 w-6 animate-spin text-gray-400" />
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {availablePlans.map((plan) => (
                <div
                  key={plan.id}
                  className={`p-4 border rounded-lg ${
                    subscription?.plan.id === plan.id
                      ? "border-blue-500 bg-blue-50"
                      : "border-gray-200 hover:border-gray-300"
                  }`}
                >
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="font-semibold text-lg">{plan.name}</h3>
                    <div className="text-right">
                      <p className="text-2xl font-bold">${plan.priceMonthly}</p>
                      <p className="text-sm text-gray-500">/month</p>
                    </div>
                  </div>

                  <div className="space-y-2 mb-4">
                    {(plan.features?.features || plan.features || [])
                      .slice(0, 4)
                      .map((feature: string, index: number) => (
                        <div key={index} className="flex items-center gap-2">
                          <Check className="h-4 w-4 text-green-500" />
                          <span className="text-sm text-gray-700">
                            {feature}
                          </span>
                        </div>
                      ))}
                  </div>

                  <Button
                    onClick={() => handlePlanChange(plan.id)}
                    disabled={loading || subscription?.plan.id === plan.id}
                    className="w-full"
                    variant={
                      subscription?.plan.id === plan.id ? "outline" : "default"
                    }
                  >
                    {loading ? (
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    ) : subscription?.plan.id === plan.id ? (
                      "Current Plan"
                    ) : (
                      <>
                        {subscription ? "Change Plan" : "Get Started"}
                        <Crown className="h-4 w-4 ml-2" />
                      </>
                    )}
                  </Button>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Billing History */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CreditCard className="h-5 w-5" />
            Billing History
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="space-y-3">
              {/* Current/Upcoming Invoice */}
              <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-blue-900">
                      Upcoming Invoice
                    </h4>
                    <p className="text-sm text-blue-700">
                      {(subscription as any)?.nextBillingDate
                        ? new Date(
                            (subscription as any).nextBillingDate
                          ).toLocaleDateString()
                        : "No upcoming billing"}
                    </p>
                  </div>
                  <div className="text-right">
                    <p className="font-bold text-blue-900">
                      ${subscription?.plan?.priceMonthly || 0}
                    </p>
                    <p className="text-xs text-blue-600">Monthly Plan</p>
                  </div>
                </div>
              </div>

              {/* Past Invoices */}
              <div className="space-y-2">
                <h5 className="font-medium text-gray-700 mb-3">
                  Past Invoices
                </h5>

                {/* Sample past invoices */}
                <div className="p-3 bg-gray-50 rounded-lg border">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-gray-900">
                        Invoice #INV-2024-001
                      </p>
                      <p className="text-sm text-gray-600">December 15, 2024</p>
                    </div>
                    <div className="text-right">
                      <p className="font-medium text-gray-900">$29.99</p>
                      <Badge variant="default" className="text-xs">
                        Paid
                      </Badge>
                    </div>
                  </div>
                </div>

                <div className="p-3 bg-gray-50 rounded-lg border">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-gray-900">
                        Invoice #INV-2024-002
                      </p>
                      <p className="text-sm text-gray-600">November 15, 2024</p>
                    </div>
                    <div className="text-right">
                      <p className="font-medium text-gray-900">$29.99</p>
                      <Badge variant="default" className="text-xs">
                        Paid
                      </Badge>
                    </div>
                  </div>
                </div>

                <div className="p-3 bg-gray-50 rounded-lg border">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-gray-900">
                        Invoice #INV-2024-003
                      </p>
                      <p className="text-sm text-gray-600">October 15, 2024</p>
                    </div>
                    <div className="text-right">
                      <p className="font-medium text-gray-900">$29.99</p>
                      <Badge variant="default" className="text-xs">
                        Paid
                      </Badge>
                    </div>
                  </div>
                </div>
              </div>

              {/* Download All Invoices Button */}
              <div className="pt-4 border-t">
                <Button variant="outline" className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Download All Invoices
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  return (
    <div className="p-8">
      <div className="max-w-4xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Settings</h1>
          <p className="text-gray-600">
            Manage your account, preferences, and security settings.
          </p>
        </div>

        {/* Tab Navigation */}
        <div className="flex space-x-1 mb-8 bg-gray-100 p-1 rounded-lg">
          {settingsTabs.map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center gap-2 px-4 py-2 rounded-md transition-colors ${
                  activeTab === tab.id
                    ? "bg-white text-blue-600 shadow-sm"
                    : "text-gray-600 hover:text-gray-900"
                }`}
              >
                <Icon className="h-4 w-4" />
                {tab.label}
              </button>
            );
          })}
        </div>

        {/* Tab Content */}
        <motion.div
          key={activeTab}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.2 }}
        >
          {activeTab === "profile" && renderProfileTab()}
          {activeTab === "notifications" && renderNotificationsTab()}
          {activeTab === "security" && renderSecurityTab()}
          {activeTab === "brand" && renderBrandTab()}
          {activeTab === "subscription" && renderSubscriptionTab()}
        </motion.div>
      </div>
    </div>
  );
};

export default Settings;
