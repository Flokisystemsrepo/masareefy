import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import {
  Settings as SettingsIcon,
  User,
  Shield,
  Globe,
  Crown,
  CreditCard,
  Calendar,
  Check,
  CheckCircle,
  Download,
  RefreshCw,
  Save,
  Mail,
  Phone,
  MapPin,
  Building,
  Eye,
  EyeOff,
  Key,
  Bell,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import {
  brandSettingsAPI,
  subscriptionAPI,
  authAPI,
  paymentAPI,
} from "@/services/api";
import { useSubscription } from "@/contexts/SubscriptionContext";
import { useAuth } from "@/contexts/AuthContext";
import { useLanguage } from "@/contexts/LanguageContext";
import { useNavigate, useParams } from "react-router-dom";

interface UserProfile {
  firstName: string;
  lastName: string;
  email: string;
  phone?: string;
  profilePictureUrl?: string;
  company?: string;
  address?: string;
}

interface BrandSettings {
  brandName: string;
  reportHeader: string;
  reportFooter: string;
  logoUrl?: string;
}

const Settings: React.FC = () => {
  const { t, isRTL } = useLanguage();
  const { user } = useAuth();
  const { subscription, refreshSubscription, forceRefresh } = useSubscription();
  const navigate = useNavigate();
  const { brandId } = useParams();

  const [activeTab, setActiveTab] = useState("profile");
  const [loading, setLoading] = useState(false);
  const [availablePlans, setAvailablePlans] = useState<any[]>([]);
  const [plansLoading, setPlansLoading] = useState(false);
  const [showPasswordForm, setShowPasswordForm] = useState(false);
  const [passwordData, setPasswordData] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });
  const [showPasswords, setShowPasswords] = useState({
    current: false,
    new: false,
    confirm: false,
  });

  // Billing state
  const [billingData, setBillingData] = useState<any>(null);
  const [billingLoading, setBillingLoading] = useState(false);

  // Notifications state
  const [notifications, setNotifications] = useState({
    emailNotifications: true,
    pushNotifications: false,
    smsNotifications: false,
    weeklyReports: true,
    monthlyReports: true,
  });
  const { toast } = useToast();

  // Profile state
  const [profile, setProfile] = useState<UserProfile>({
    firstName: user?.firstName || "Zoz",
    lastName: user?.lastName || "Emad",
    email: user?.email || "ziz@gmail.com",
    phone: user?.phoneNumber || "",
    profilePictureUrl: "",
    company: "",
    address: "",
  });

  // Brand settings state
  const [brandSettings, setBrandSettings] = useState<BrandSettings>({
    brandName: "Your Brand",
    reportHeader: "Financial Report",
    reportFooter: "Generated by Your Brand Management System",
    logoUrl: "",
  });

  const settingsTabs = [
    { id: "profile", label: t("settings.tabs.profile"), icon: User },
    { id: "security", label: t("settings.tabs.security"), icon: Shield },
    { id: "subscription", label: t("settings.tabs.subscription"), icon: Crown },
    { id: "billing", label: t("settings.tabs.billing"), icon: CreditCard },
  ];

  useEffect(() => {
    loadPlans();
    loadBillingData();
  }, []);

  const loadBillingData = async () => {
    try {
      setBillingLoading(true);
      const response = await paymentAPI.getPaymentHistory();
      if (response.success) {
        setBillingData(response.data);
      }
    } catch (error) {
      console.error("Failed to load billing data:", error);
    } finally {
      setBillingLoading(false);
    }
  };

  const handlePasswordChange = async () => {
    try {
      // Validate passwords
      if (passwordData.newPassword !== passwordData.confirmPassword) {
        toast({
          title: "Error",
          description: "New passwords do not match",
          variant: "destructive",
        });
        return;
      }

      if (passwordData.newPassword.length < 8) {
        toast({
          title: "Error",
          description: "New password must be at least 8 characters long",
          variant: "destructive",
        });
        return;
      }

      setLoading(true);

      // Call the change password API using the existing authAPI method
      const data = await authAPI.changePassword({
        currentPassword: passwordData.currentPassword,
        newPassword: passwordData.newPassword,
      });

      if (!data.success) {
        throw new Error(data.error || "Failed to change password");
      }

      toast({
        title: "Success",
        description: "Password changed successfully",
      });

      // Reset form
      setPasswordData({
        currentPassword: "",
        newPassword: "",
        confirmPassword: "",
      });
      setShowPasswordForm(false);
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to change password",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const loadPlans = async () => {
    try {
      setPlansLoading(true);
      const response = await subscriptionAPI.getPlans();
      console.log("Settings - Fetched plans:", response);

      if (response && Array.isArray(response)) {
        setAvailablePlans(response);
      } else if (response && response.data && Array.isArray(response.data)) {
        setAvailablePlans(response.data);
      }
    } catch (error) {
      console.error("Failed to load plans:", error);
    } finally {
      setPlansLoading(false);
    }
  };

  const getButtonLabel = (targetPlan: any) => {
    if (!subscription) return "Get Started";

    const currentPlanName = subscription.plan.name.toLowerCase();
    const targetPlanName = targetPlan.name.toLowerCase();

    // Get plan hierarchy from available plans (sorted by price)
    const sortedPlans = [...availablePlans].sort(
      (a, b) => a.priceMonthly - b.priceMonthly
    );
    const planHierarchy = sortedPlans.map((plan) => plan.name.toLowerCase());

    const currentIndex = planHierarchy.indexOf(currentPlanName);
    const targetIndex = planHierarchy.indexOf(targetPlanName);

    if (currentIndex === targetIndex) return "Active Plan";
    if (targetIndex > currentIndex) return "Upgrade";
    if (targetIndex < currentIndex) return "Downgrade";

    return "Change Plan";
  };

  const handlePlanChange = async (plan: any) => {
    try {
      // Check if user is already on the target plan
      if (subscription && subscription.plan.id === plan.id) {
        toast({
          title: "Info",
          description: `You're already on the ${plan.name} plan!`,
        });
        return;
      }

      // Handle Free plan downgrade (no payment required)
      if (plan.name.toLowerCase() === "free") {
        try {
          // Get current subscription ID first
          const subscriptionResponse = await fetch(
            "/api/subscription/my-subscription",
            {
              headers: {
                Authorization: `Bearer ${localStorage.getItem("token")}`,
              },
            }
          );

          if (!subscriptionResponse.ok) {
            throw new Error("Failed to get current subscription");
          }

          const subscriptionData = await subscriptionResponse.json();
          const subscriptionId = subscriptionData.data.id;

          // Update subscription to Free plan
          const response = await fetch(
            `/api/subscription/subscriptions/${subscriptionId}`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${localStorage.getItem("token")}`,
              },
              body: JSON.stringify({
                planId: plan.id,
                status: "active",
              }),
            }
          );

          if (!response.ok) {
            const error = await response.json();
            throw new Error(
              error.message || "Failed to downgrade to Free plan"
            );
          }

          toast({
            title: "Success",
            description: "Successfully downgraded to Free plan!",
          });

          // Refresh subscription data instantly
          await refreshSubscription();

          return;
        } catch (error: any) {
          console.error("Free plan downgrade error:", error);
          toast({
            title: "Error",
            description: error.message || "Failed to downgrade to Free plan",
            variant: "destructive",
          });
          return;
        }
      }

      // TODO: Implement payment gateway integration
      toast({
        title: "Payment Integration",
        description:
          "Payment gateway integration is being set up. Please contact support for manual upgrade.",
        variant: "default",
      });
      return;

      // Store the selected plan in localStorage for callback handling
      localStorage.setItem(
        "pendingUpgrade",
        JSON.stringify({
          planId: plan.id,
          planName: plan.name,
          timestamp: Date.now(),
        })
      );

      console.log(`Redirecting to payment URL for ${plan.name}:`, url);

      // Try to open payment page
      const newWindow = window.open(url, "_blank");

      if (
        !newWindow ||
        newWindow.closed ||
        typeof newWindow.closed == "undefined"
      ) {
        // Popup was blocked, redirect in the same window
        console.log("Popup blocked, redirecting in same window");
        window.location.href = url;
      } else {
        console.log("Payment page opened in new tab");
      }
    } catch (error: any) {
      console.error("Payment initiation error:", error);
      toast({
        title: "Error",
        description: error.message || "Failed to initiate payment",
        variant: "destructive",
      });
    }
  };

  const saveProfile = async () => {
    try {
      setLoading(true);
      // Save profile logic here
      toast({
        title: "Success",
        description: "Profile updated successfully!",
      });
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to update profile",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const saveBrandSettings = async () => {
    try {
      setLoading(true);
      if (brandId) {
        await brandSettingsAPI.update(brandId, brandSettings);
      }
      localStorage.setItem("brandSettings", JSON.stringify(brandSettings));
      toast({
        title: "Success",
        description: "Brand settings saved successfully!",
      });
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to save brand settings",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const saveNotifications = async () => {
    try {
      setLoading(true);
      // Save notification settings logic here
      toast({
        title: "Success",
        description: "Notification settings saved successfully!",
      });
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to save notification settings",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const renderProfileTab = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <User className="h-5 w-5" />
            Personal Information
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="firstName">First Name</Label>
              <Input
                id="firstName"
                value={profile.firstName}
                onChange={(e) =>
                  setProfile((prev) => ({ ...prev, firstName: e.target.value }))
                }
                placeholder="Enter your first name"
              />
            </div>
            <div>
              <Label htmlFor="lastName">Last Name</Label>
              <Input
                id="lastName"
                value={profile.lastName}
                onChange={(e) =>
                  setProfile((prev) => ({ ...prev, lastName: e.target.value }))
                }
                placeholder="Enter your last name"
              />
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="email">Email Address</Label>
              <Input
                id="email"
                value={profile.email}
                disabled
                className="bg-gray-50"
              />
              <p className="text-xs text-gray-500 mt-1">
                Contact support to change email address
              </p>
            </div>
            <div>
              <Label htmlFor="phone">Phone Number</Label>
              <Input
                id="phone"
                value={profile.phone}
                disabled
                className="bg-gray-50"
                placeholder="Phone number from registration"
              />
              <p className="text-xs text-gray-500 mt-1">
                Phone number cannot be changed
              </p>
            </div>
          </div>
          <div>
            <Label htmlFor="profilePicture">Profile Picture URL</Label>
            <Input
              id="profilePicture"
              value={profile.profilePictureUrl}
              onChange={(e) =>
                setProfile((prev) => ({
                  ...prev,
                  profilePictureUrl: e.target.value,
                }))
              }
              placeholder="https://example.com/your-picture.jpg"
            />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="company">Company</Label>
              <Input
                id="company"
                value={profile.company}
                onChange={(e) =>
                  setProfile((prev) => ({ ...prev, company: e.target.value }))
                }
                placeholder="Enter your company name"
              />
            </div>
            <div>
              <Label htmlFor="address">Address</Label>
              <Input
                id="address"
                value={profile.address}
                onChange={(e) =>
                  setProfile((prev) => ({ ...prev, address: e.target.value }))
                }
                placeholder="Enter your address"
              />
            </div>
          </div>
          <Button onClick={saveProfile} disabled={loading} className="w-full">
            {loading ? (
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <Save className="h-4 w-4 mr-2" />
            )}
            Save Profile Changes
          </Button>
        </CardContent>
      </Card>
    </div>
  );

  const renderNotificationsTab = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bell className="h-5 w-5" />
            Notification Preferences
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-4">
            {Object.entries(notifications).map(([key, value]) => (
              <div
                key={key}
                className="flex items-center justify-between p-4 border rounded-lg"
              >
                <div>
                  <h4 className="font-medium text-gray-900 capitalize">
                    {key.replace(/([A-Z])/g, " $1").trim()}
                  </h4>
                  <p className="text-sm text-gray-500">
                    {key === "email" &&
                      "Receive email notifications about important updates"}
                    {key === "push" &&
                      "Receive push notifications in your browser"}
                    {key === "reports" &&
                      "Get notified when reports are generated"}
                    {key === "updates" &&
                      "Receive system updates and maintenance notifications"}
                    {key === "marketing" &&
                      "Receive promotional emails and product updates"}
                  </p>
                </div>
                <Button
                  variant={value ? "default" : "outline"}
                  size="sm"
                  onClick={() =>
                    setNotifications((prev) => ({
                      ...prev,
                      [key]: !value,
                    }))
                  }
                >
                  {value ? "On" : "Off"}
                </Button>
              </div>
            ))}
          </div>
          <Button
            onClick={saveNotifications}
            disabled={loading}
            className="w-full"
          >
            {loading ? (
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <Save className="h-4 w-4 mr-2" />
            )}
            Save Notification Settings
          </Button>
        </CardContent>
      </Card>
    </div>
  );

  const renderSecurityTab = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            Security Settings
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-4">
            <div className="p-4 border rounded-lg">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h4 className="font-medium text-gray-900 mb-1">
                    Change Password
                  </h4>
                  <p className="text-sm text-gray-500">
                    Update your password to keep your account secure
                  </p>
                </div>
                <Button
                  variant="outline"
                  onClick={() => setShowPasswordForm(!showPasswordForm)}
                >
                  <Key className="h-4 w-4 mr-2" />
                  {showPasswordForm ? "Cancel" : "Change Password"}
                </Button>
              </div>

              {showPasswordForm && (
                <div className="space-y-4 pt-4 border-t">
                  <div>
                    <Label htmlFor="currentPassword">Current Password</Label>
                    <div className="relative">
                      <Input
                        id="currentPassword"
                        type={showPasswords.current ? "text" : "password"}
                        value={passwordData.currentPassword}
                        onChange={(e) =>
                          setPasswordData((prev) => ({
                            ...prev,
                            currentPassword: e.target.value,
                          }))
                        }
                        placeholder="Enter your current password"
                        className="pr-10"
                      />
                      <button
                        type="button"
                        onClick={() =>
                          setShowPasswords((prev) => ({
                            ...prev,
                            current: !prev.current,
                          }))
                        }
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                      >
                        {showPasswords.current ? (
                          <EyeOff className="h-4 w-4" />
                        ) : (
                          <Eye className="h-4 w-4" />
                        )}
                      </button>
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="newPassword">New Password</Label>
                    <div className="relative">
                      <Input
                        id="newPassword"
                        type={showPasswords.new ? "text" : "password"}
                        value={passwordData.newPassword}
                        onChange={(e) =>
                          setPasswordData((prev) => ({
                            ...prev,
                            newPassword: e.target.value,
                          }))
                        }
                        placeholder="Enter your new password"
                        className="pr-10"
                      />
                      <button
                        type="button"
                        onClick={() =>
                          setShowPasswords((prev) => ({
                            ...prev,
                            new: !prev.new,
                          }))
                        }
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                      >
                        {showPasswords.new ? (
                          <EyeOff className="h-4 w-4" />
                        ) : (
                          <Eye className="h-4 w-4" />
                        )}
                      </button>
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="confirmPassword">
                      Confirm New Password
                    </Label>
                    <div className="relative">
                      <Input
                        id="confirmPassword"
                        type={showPasswords.confirm ? "text" : "password"}
                        value={passwordData.confirmPassword}
                        onChange={(e) =>
                          setPasswordData((prev) => ({
                            ...prev,
                            confirmPassword: e.target.value,
                          }))
                        }
                        placeholder="Confirm your new password"
                        className="pr-10"
                      />
                      <button
                        type="button"
                        onClick={() =>
                          setShowPasswords((prev) => ({
                            ...prev,
                            confirm: !prev.confirm,
                          }))
                        }
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                      >
                        {showPasswords.confirm ? (
                          <EyeOff className="h-4 w-4" />
                        ) : (
                          <Eye className="h-4 w-4" />
                        )}
                      </button>
                    </div>
                  </div>

                  <div className="flex gap-2">
                    <Button
                      onClick={handlePasswordChange}
                      disabled={loading}
                      className="flex-1"
                    >
                      {loading ? (
                        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      ) : (
                        <Save className="h-4 w-4 mr-2" />
                      )}
                      Change Password
                    </Button>
                    <Button
                      variant="outline"
                      onClick={() => {
                        setShowPasswordForm(false);
                        setPasswordData({
                          currentPassword: "",
                          newPassword: "",
                          confirmPassword: "",
                        });
                      }}
                    >
                      Cancel
                    </Button>
                  </div>
                </div>
              )}
            </div>

            <div className="p-4 border rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">
                Two-Factor Authentication
              </h4>
              <p className="text-sm text-gray-500 mb-4">
                Add an extra layer of security to your account
              </p>
              <Button variant="outline" className="w-full" disabled>
                <Shield className="h-4 w-4 mr-2" />
                Enable 2FA (Coming Soon)
              </Button>
            </div>

            <div className="p-4 border rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">Login Sessions</h4>
              <p className="text-sm text-gray-500 mb-4">
                Manage your active login sessions across devices
              </p>
              <Button variant="outline" className="w-full" disabled>
                <Shield className="h-4 w-4 mr-2" />
                View Sessions (Coming Soon)
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderSubscriptionTab = () => (
    <div className="space-y-6">
      {/* Current Plan */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Crown className="h-5 w-5" />
            Current Subscription
          </CardTitle>
        </CardHeader>
        <CardContent>
          {subscription ? (
            <div className="space-y-6">
              {/* Plan Overview */}
              <div className="flex items-center justify-between p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                <div className="flex items-center gap-4">
                  <div className="p-3 bg-blue-100 rounded-full">
                    <Crown className="h-6 w-6 text-blue-600" />
                  </div>
                  <div>
                    <h3 className="font-bold text-xl text-blue-900">
                      {subscription.plan.name}
                    </h3>
                    <p className="text-blue-700 font-medium">
                      ${subscription.plan.priceMonthly}/month
                    </p>
                  </div>
                </div>
                <div className="text-right">
                  <Badge
                    variant={
                      subscription.status === "active"
                        ? "default"
                        : subscription.status === "expired"
                        ? "destructive"
                        : "secondary"
                    }
                    className="text-sm px-3 py-1"
                  >
                    {subscription.status === "active"
                      ? "Active"
                      : subscription.status === "expired"
                      ? "Expired"
                      : subscription.status}
                  </Badge>
                  {subscription.isExpired && (
                    <p className="text-xs text-red-600 mt-1">Action Required</p>
                  )}
                </div>
              </div>

              {/* Billing Information */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="p-4 bg-gray-50 rounded-lg">
                  <div className="flex items-center gap-2 mb-2">
                    <CreditCard className="h-4 w-4 text-gray-600" />
                    <span className="text-sm font-medium text-gray-700">
                      Billing Cycle
                    </span>
                  </div>
                  <p className="text-lg font-semibold text-gray-900">
                    {(subscription as any).billingCycle || "Monthly"}
                  </p>
                  <p className="text-xs text-gray-500">Renews automatically</p>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg">
                  <div className="flex items-center gap-2 mb-2">
                    <Calendar className="h-4 w-4 text-gray-600" />
                    <span className="text-sm font-medium text-gray-700">
                      Next Billing
                    </span>
                  </div>
                  <p className="text-lg font-semibold text-gray-900">
                    {(subscription as any).nextBillingDate
                      ? new Date(
                          (subscription as any).nextBillingDate
                        ).toLocaleDateString()
                      : "N/A"}
                  </p>
                  <p className="text-xs text-gray-500">
                    {(subscription as any).nextBillingDate
                      ? `${Math.ceil(
                          (new Date(
                            (subscription as any).nextBillingDate
                          ).getTime() -
                            new Date().getTime()) /
                            (1000 * 60 * 60 * 24)
                        )} days remaining`
                      : "No billing date set"}
                  </p>
                </div>
              </div>

              {/* Usage Information */}
              <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                <h4 className="font-medium text-green-900 mb-3">Plan Usage</h4>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">
                      {(subscription as any).usage?.inventory || 0}
                    </p>
                    <p className="text-xs text-green-700">Products</p>
                    <p className="text-xs text-green-600">
                      / {(subscription.plan as any).limits?.inventory || "∞"}
                    </p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">
                      {(subscription as any).usage?.revenue || 0}
                    </p>
                    <p className="text-xs text-green-700">Revenue Entries</p>
                    <p className="text-xs text-green-600">
                      / {(subscription.plan as any).limits?.revenue || "∞"}
                    </p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">
                      {(subscription as any).usage?.costs || 0}
                    </p>
                    <p className="text-xs text-green-700">Cost Entries</p>
                    <p className="text-xs text-green-600">
                      / {(subscription.plan as any).limits?.costs || "∞"}
                    </p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">
                      {(subscription as any).usage?.reports || 0}
                    </p>
                    <p className="text-xs text-green-700">Reports</p>
                    <p className="text-xs text-green-600">
                      / {(subscription.plan as any).limits?.reports || "∞"}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="p-4 bg-gray-100 rounded-full w-20 h-20 mx-auto mb-4 flex items-center justify-center">
                <Crown className="h-10 w-10 text-gray-400" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                No Active Subscription
              </h3>
              <p className="text-gray-600 mb-6 max-w-md mx-auto">
                Get started with a plan to unlock all features and start
                managing your business finances.
              </p>
              <Button
                onClick={() => loadPlans()}
                className="bg-blue-600 hover:bg-blue-700"
              >
                <Crown className="h-4 w-4 mr-2" />
                Choose a Plan
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Available Plans */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CreditCard className="h-5 w-5" />
            Available Plans
          </CardTitle>
        </CardHeader>
        <CardContent>
          {plansLoading ? (
            <div className="flex justify-center py-8">
              <RefreshCw className="h-6 w-6 animate-spin text-gray-400" />
            </div>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {availablePlans.map((plan) => (
                <div
                  key={plan.id}
                  className={`relative p-6 border-2 rounded-xl transition-all duration-300 ${
                    subscription?.plan.id === plan.id
                      ? "border-blue-500 bg-gradient-to-br from-blue-50 to-blue-100 shadow-lg"
                      : "border-gray-200 hover:border-gray-300 hover:shadow-md bg-white"
                  }`}
                >
                  {/* Current Plan Badge */}
                  {subscription?.plan.id === plan.id && (
                    <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                      <span className="bg-blue-500 text-white px-4 py-1 rounded-full text-sm font-medium">
                        Current Plan
                      </span>
                    </div>
                  )}

                  {/* Plan Header */}
                  <div className="text-center mb-6">
                    <h3 className="font-bold text-xl mb-2">{plan.name}</h3>
                    <div className="mb-4">
                      <span className="text-4xl font-bold text-gray-900">
                        {plan.priceMonthly === 0
                          ? "Free"
                          : `${plan.priceMonthly} EGP`}
                      </span>
                      {plan.priceMonthly > 0 && (
                        <span className="text-gray-500 ml-1">/month</span>
                      )}
                    </div>
                  </div>

                  {/* Features */}
                  <div className="space-y-3 mb-6 max-h-80 overflow-y-auto">
                    {(plan.features?.features || plan.features || []).map(
                      (feature: string, index: number) => (
                        <div key={index} className="flex items-start gap-3">
                          <Check className="h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" />
                          <span className="text-sm text-gray-700 leading-relaxed">
                            {feature}
                          </span>
                        </div>
                      )
                    )}
                  </div>

                  {/* Action Button */}
                  <Button
                    onClick={() => handlePlanChange(plan)}
                    disabled={loading || subscription?.plan.id === plan.id}
                    className="w-full h-12 text-base font-medium"
                    variant={
                      subscription?.plan.id === plan.id ? "outline" : "default"
                    }
                  >
                    {loading ? (
                      <RefreshCw className="h-5 w-5 mr-2 animate-spin" />
                    ) : subscription?.plan.id === plan.id ? (
                      <div className="flex items-center gap-2">
                        <CheckCircle className="h-5 w-5" />
                        Active Plan
                      </div>
                    ) : (
                      <div className="flex items-center gap-2">
                        <Crown className="h-5 w-5" />
                        {getButtonLabel(plan)}
                      </div>
                    )}
                  </Button>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Billing History */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CreditCard className="h-5 w-5" />
            Billing History
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="space-y-3">
              {/* Current/Upcoming Invoice */}
              <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-blue-900">
                      Upcoming Invoice
                    </h4>
                    <p className="text-sm text-blue-700">
                      {(subscription as any)?.nextBillingDate
                        ? new Date(
                            (subscription as any).nextBillingDate
                          ).toLocaleDateString()
                        : "No upcoming billing"}
                    </p>
                  </div>
                  <div className="text-right">
                    <p className="font-bold text-blue-900">
                      ${subscription?.plan?.priceMonthly || 0}
                    </p>
                    <p className="text-xs text-blue-600">Monthly Plan</p>
                  </div>
                </div>
              </div>

              {/* Past Invoices */}
              <div className="space-y-2">
                <h5 className="font-medium text-gray-700 mb-3">
                  Past Invoices
                </h5>

                {/* Sample past invoices */}
                <div className="p-3 bg-gray-50 rounded-lg border">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-gray-900">
                        Invoice #INV-2024-001
                      </p>
                      <p className="text-sm text-gray-600">December 15, 2024</p>
                    </div>
                    <div className="text-right">
                      <p className="font-medium text-gray-900">$29.99</p>
                      <Badge variant="default" className="text-xs">
                        Paid
                      </Badge>
                    </div>
                  </div>
                </div>

                <div className="p-3 bg-gray-50 rounded-lg border">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-gray-900">
                        Invoice #INV-2024-002
                      </p>
                      <p className="text-sm text-gray-600">November 15, 2024</p>
                    </div>
                    <div className="text-right">
                      <p className="font-medium text-gray-900">$29.99</p>
                      <Badge variant="default" className="text-xs">
                        Paid
                      </Badge>
                    </div>
                  </div>
                </div>

                <div className="p-3 bg-gray-50 rounded-lg border">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-gray-900">
                        Invoice #INV-2024-003
                      </p>
                      <p className="text-sm text-gray-600">October 15, 2024</p>
                    </div>
                    <div className="text-right">
                      <p className="font-medium text-gray-900">$29.99</p>
                      <Badge variant="default" className="text-xs">
                        Paid
                      </Badge>
                    </div>
                  </div>
                </div>
              </div>

              {/* Download All Invoices Button */}
              <div className="pt-4 border-t">
                <Button variant="outline" className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Download All Invoices
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderBillingTab = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CreditCard className="h-5 w-5" />
            Payment History
          </CardTitle>
        </CardHeader>
        <CardContent>
          {billingLoading ? (
            <div className="flex justify-center items-center py-8">
              <RefreshCw className="h-6 w-6 animate-spin text-blue-600" />
              <span className="ml-2 text-gray-600">
                Loading payment history...
              </span>
            </div>
          ) : billingData?.payments?.length > 0 ? (
            <div className="space-y-4">
              {billingData.payments.map((payment: any, index: number) => (
                <div
                  key={payment.id || index}
                  className="flex items-center justify-between p-4 bg-gray-50 rounded-lg"
                >
                  <div className="flex items-center gap-4">
                    <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                      <CheckCircle className="h-5 w-5 text-green-600" />
                    </div>
                    <div>
                      <p className="font-medium text-gray-900">
                        {payment.currency} {payment.amount}
                      </p>
                      <p className="text-sm text-gray-600">
                        {new Date(payment.processedAt).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge className="bg-green-100 text-green-800">
                      {payment.status}
                    </Badge>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        // Download invoice logic
                        const invoiceContent = `
                          INVOICE
                          =======
                          
                          Invoice ID: ${payment.id}
                          Amount: ${payment.currency} ${payment.amount}
                          Date: ${new Date(
                            payment.processedAt
                          ).toLocaleDateString()}
                          Status: ${payment.status}
                          Payment Method: ${payment.paymentMethod}
                          
                          Thank you for your payment!
                        `;

                        const blob = new Blob([invoiceContent], {
                          type: "text/plain",
                        });
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement("a");
                        a.href = url;
                        a.download = `invoice-${payment.id}.txt`;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                      }}
                    >
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8">
              <CreditCard className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                No Payment History
              </h3>
              <p className="text-gray-500">
                You haven't made any payments yet. Upgrade your plan to see
                payment history here.
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {billingData?.invoices?.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Download className="h-5 w-5" />
              Invoices
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {billingData.invoices.map((invoice: any, index: number) => (
                <div
                  key={invoice.id || index}
                  className="flex items-center justify-between p-4 bg-gray-50 rounded-lg"
                >
                  <div>
                    <p className="font-medium text-gray-900">
                      Invoice #{invoice.invoiceNumber}
                    </p>
                    <p className="text-sm text-gray-600">
                      {invoice.currency} {invoice.amount} -{" "}
                      {new Date(invoice.createdAt).toLocaleDateString()}
                    </p>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge
                      className={
                        invoice.status === "paid"
                          ? "bg-green-100 text-green-800"
                          : "bg-yellow-100 text-yellow-800"
                      }
                    >
                      {invoice.status}
                    </Badge>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        // Download invoice logic
                        const invoiceContent = `
                          INVOICE
                          =======
                          
                          Invoice Number: ${invoice.invoiceNumber}
                          Amount: ${invoice.currency} ${invoice.amount}
                          Date: ${new Date(
                            invoice.createdAt
                          ).toLocaleDateString()}
                          Status: ${invoice.status}
                          Due Date: ${new Date(
                            invoice.dueDate
                          ).toLocaleDateString()}
                          ${
                            invoice.paidAt
                              ? `Paid Date: ${new Date(
                                  invoice.paidAt
                                ).toLocaleDateString()}`
                              : ""
                          }
                          
                          Thank you for your business!
                        `;

                        const blob = new Blob([invoiceContent], {
                          type: "text/plain",
                        });
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement("a");
                        a.href = url;
                        a.download = `invoice-${invoice.invoiceNumber}.txt`;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                      }}
                    >
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );

  return (
    <div className="p-8">
      <div className="max-w-4xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            {t("settings.title")}
          </h1>
          <p className="text-gray-600">{t("settings.subtitle")}</p>
        </div>

        {/* Tab Navigation */}
        <div className="flex space-x-1 mb-8 bg-gray-100 p-1 rounded-lg">
          {settingsTabs.map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center gap-2 px-4 py-2 rounded-md transition-colors ${
                  activeTab === tab.id
                    ? "bg-white text-blue-600 shadow-sm"
                    : "text-gray-600 hover:text-gray-900"
                }`}
              >
                <Icon className="h-4 w-4" />
                {tab.label}
              </button>
            );
          })}
        </div>

        {/* Tab Content */}
        <motion.div
          key={activeTab}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.2 }}
        >
          {activeTab === "profile" && renderProfileTab()}
          {activeTab === "security" && renderSecurityTab()}
          {activeTab === "subscription" && renderSubscriptionTab()}
          {activeTab === "billing" && renderBillingTab()}
        </motion.div>
      </div>
    </div>
  );
};

export default Settings;
