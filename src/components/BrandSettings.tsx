import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import {
  Settings,
  Crown,
  CreditCard,
  User,
  Calendar,
  Check,
  Download,
  RefreshCw,
  Save,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { brandSettingsAPI, subscriptionAPI } from "@/services/api";
import { useSubscription } from "@/contexts/SubscriptionContext";
import { useAuth } from "@/contexts/AuthContext";
import { useLanguage } from "@/contexts/LanguageContext";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

interface BrandSettings {
  brandName: string;
  reportHeader: string;
  reportFooter: string;
}

interface BrandSettingsProps {
  onSettingsChange?: (settings: BrandSettings) => void;
  isOpen: boolean;
  onClose: () => void;
  brandId?: string;
}

const BrandSettings: React.FC<BrandSettingsProps> = ({
  onSettingsChange,
  isOpen,
  onClose,
  brandId,
}) => {
  const { t, isRTL } = useLanguage();
  const { user } = useAuth();
  const { subscription, refreshSubscription, forceRefresh } = useSubscription();

  const [settings, setSettings] = useState<BrandSettings>({
    brandName: "Your Brand",
    reportHeader: "Financial Report",
    reportFooter: "Generated by Your Brand Management System",
  });

  const [loading, setLoading] = useState(false);
  const [availablePlans, setAvailablePlans] = useState<any[]>([]);
  const [plansLoading, setPlansLoading] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    // Load existing brand settings from API or localStorage
    const loadSettings = async () => {
      if (brandId) {
        try {
          const brandSettings = await brandSettingsAPI.get(brandId);
          setSettings({ ...settings, ...brandSettings.settings });
        } catch (error) {
          console.error("Error loading brand settings:", error);
          // Fallback to localStorage
          const savedSettings = localStorage.getItem("brandSettings");
          if (savedSettings) {
            try {
              const parsed = JSON.parse(savedSettings);
              setSettings({ ...settings, ...parsed });
            } catch (error) {
              console.error("Error parsing saved brand settings:", error);
            }
          }
        }
      } else {
        // Fallback to localStorage if no brandId
        const savedSettings = localStorage.getItem("brandSettings");
        if (savedSettings) {
          try {
            const parsed = JSON.parse(savedSettings);
            setSettings({ ...settings, ...parsed });
          } catch (error) {
            console.error("Error parsing saved brand settings:", error);
          }
        }
      }
    };

    loadSettings();
  }, [brandId]);

  const saveSettings = async () => {
    try {
      setLoading(true);

      if (brandId) {
        // Save to backend API
        await brandSettingsAPI.update(brandId, settings);
      }

      // Also save to localStorage as backup
      localStorage.setItem("brandSettings", JSON.stringify(settings));

      toast({
        title: "Success",
        description: "Brand settings saved successfully!",
      });

      onSettingsChange?.(settings);
      onClose();
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to save brand settings",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const resetToDefaults = () => {
    setSettings({
      brandName: "Your Brand",
      reportHeader: "Financial Report",
      reportFooter: "Generated by Your Brand Management System",
    });
  };

  // Load available plans
  const loadPlans = async () => {
    try {
      setPlansLoading(true);
      const response = await subscriptionAPI.getPlans();
      console.log("BrandSettings - Fetched plans:", response);

      if (response && Array.isArray(response)) {
        setAvailablePlans(response);
      } else if (response && response.data && Array.isArray(response.data)) {
        setAvailablePlans(response.data);
      }
    } catch (error) {
      console.error("Failed to load plans:", error);
    } finally {
      setPlansLoading(false);
    }
  };

  const getButtonLabel = (targetPlan: any) => {
    if (!subscription) return "Get Started";

    const currentPlanName = subscription.plan.name.toLowerCase();
    const targetPlanName = targetPlan.name.toLowerCase();

    // Get plan hierarchy from available plans (sorted by price)
    const sortedPlans = [...availablePlans].sort(
      (a, b) => a.priceMonthly - b.priceMonthly
    );
    const planHierarchy = sortedPlans.map((plan) => plan.name.toLowerCase());

    const currentIndex = planHierarchy.indexOf(currentPlanName);
    const targetIndex = planHierarchy.indexOf(targetPlanName);

    if (currentIndex === targetIndex) return "Current Plan";
    if (targetIndex > currentIndex) return "Upgrade";
    if (targetIndex < currentIndex) return "Downgrade";

    return "Change Plan";
  };

  // Handle plan change
  const handlePlanChange = async (plan: any) => {
    try {
      // Check if user is already on the target plan
      if (subscription && subscription.plan.id === plan.id) {
        toast({
          title: "Info",
          description: `You're already on the ${plan.name} plan!`,
        });
        return;
      }

      // Handle Free plan downgrade (no payment required)
      if (plan.name.toLowerCase() === "free") {
        try {
          // Get current subscription ID first
          const subscriptionResponse = await fetch(
            "/api/subscription/my-subscription",
            {
              headers: {
                Authorization: `Bearer ${localStorage.getItem("token")}`,
              },
            }
          );

          if (!subscriptionResponse.ok) {
            throw new Error("Failed to get current subscription");
          }

          const subscriptionData = await subscriptionResponse.json();
          const subscriptionId = subscriptionData.data.id;

          // Update subscription to Free plan
          const response = await fetch(
            `/api/subscription/subscriptions/${subscriptionId}`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${localStorage.getItem("token")}`,
              },
              body: JSON.stringify({
                planId: plan.id,
                status: "active",
              }),
            }
          );

          if (!response.ok) {
            const error = await response.json();
            throw new Error(
              error.message || "Failed to downgrade to Free plan"
            );
          }

          toast({
            title: "Success",
            description: "Successfully downgraded to Free plan!",
          });

          // Refresh subscription data instantly
          await refreshSubscription();

          return;
        } catch (error: any) {
          console.error("Free plan downgrade error:", error);
          toast({
            title: "Error",
            description: error.message || "Failed to downgrade to Free plan",
            variant: "destructive",
          });
          return;
        }
      }

      // TODO: Implement payment gateway integration
      toast.error(
        "Payment gateway integration is being set up. Please contact support for manual upgrade."
      );
      return;

      // Store the selected plan in localStorage for callback handling
      localStorage.setItem(
        "pendingUpgrade",
        JSON.stringify({
          planId: plan.id,
          planName: plan.name,
          timestamp: Date.now(),
        })
      );

      console.log(`Redirecting to payment URL for ${plan.name}:`, url);

      // Try to open payment page
      const newWindow = window.open(url, "_blank");

      if (
        !newWindow ||
        newWindow.closed ||
        typeof newWindow.closed == "undefined"
      ) {
        // Popup was blocked, redirect in the same window
        console.log("Popup blocked, redirecting in same window");
        window.location.href = url;
      } else {
        console.log("Payment page opened in new tab");
      }
    } catch (error: any) {
      console.error("Payment initiation error:", error);
      toast({
        title: "Error",
        description: error.message || "Failed to initiate payment",
        variant: "destructive",
      });
    }
  };

  // Load plans when component mounts
  useEffect(() => {
    if (isOpen) {
      loadPlans();
    }
  }, [isOpen]);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Brand Settings & Configuration
          </DialogTitle>
        </DialogHeader>

        <Tabs defaultValue="subscription" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="subscription">
              Subscription & Billing
            </TabsTrigger>
            <TabsTrigger value="account">Account Info</TabsTrigger>
          </TabsList>

          {/* Subscription & Billing Tab */}
          <TabsContent value="subscription" className="space-y-6">
            {/* Current Plan */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <Crown className="h-5 w-5" />
                  Current Subscription
                </CardTitle>
              </CardHeader>
              <CardContent>
                {subscription ? (
                  <div className="space-y-6">
                    {/* Plan Overview */}
                    <div className="flex items-center justify-between p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                      <div className="flex items-center gap-4">
                        <div className="p-3 bg-blue-100 rounded-full">
                          <Crown className="h-6 w-6 text-blue-600" />
                        </div>
                        <div>
                          <h3 className="font-bold text-xl text-blue-900">
                            {subscription.plan.name}
                          </h3>
                          <p className="text-blue-700 font-medium">
                            {subscription.plan.priceMonthly === 0
                              ? "Free"
                              : `${subscription.plan.priceMonthly} EGP`}
                            /month
                          </p>
                        </div>
                      </div>
                      <div className="text-right">
                        <Badge
                          variant={
                            subscription.status === "active"
                              ? "default"
                              : subscription.status === "expired"
                              ? "destructive"
                              : "secondary"
                          }
                          className="text-sm px-3 py-1"
                        >
                          {subscription.status === "active"
                            ? "Active"
                            : subscription.status === "expired"
                            ? "Expired"
                            : subscription.status}
                        </Badge>
                        {subscription.isExpired && (
                          <p className="text-xs text-red-600 mt-1">
                            Action Required
                          </p>
                        )}
                      </div>
                    </div>

                    {/* Billing Information */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center gap-2 mb-2">
                          <CreditCard className="h-4 w-4 text-gray-600" />
                          <span className="text-sm font-medium text-gray-700">
                            Billing Cycle
                          </span>
                        </div>
                        <p className="text-lg font-semibold text-gray-900">
                          Monthly
                        </p>
                        <p className="text-xs text-gray-500">
                          Renews automatically
                        </p>
                      </div>

                      <div className="p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center gap-2 mb-2">
                          <Calendar className="h-4 w-4 text-gray-600" />
                          <span className="text-sm font-medium text-gray-700">
                            Next Billing
                          </span>
                        </div>
                        <p className="text-lg font-semibold text-gray-900">
                          {subscription.currentPeriodEnd
                            ? new Date(
                                subscription.currentPeriodEnd
                              ).toLocaleDateString()
                            : "N/A"}
                        </p>
                        <p className="text-xs text-gray-500">
                          {subscription.currentPeriodEnd
                            ? `${Math.ceil(
                                (new Date(
                                  subscription.currentPeriodEnd
                                ).getTime() -
                                  new Date().getTime()) /
                                  (1000 * 60 * 60 * 24)
                              )} days remaining`
                            : "No billing date set"}
                        </p>
                      </div>
                    </div>

                    {/* Usage Information */}
                    <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                      <h4 className="font-medium text-green-900 mb-3">
                        Plan Usage
                      </h4>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <div className="text-center">
                          <p className="text-2xl font-bold text-green-600">0</p>
                          <p className="text-xs text-green-700">Products</p>
                          <p className="text-xs text-green-600">/ ∞</p>
                        </div>
                        <div className="text-center">
                          <p className="text-2xl font-bold text-green-600">0</p>
                          <p className="text-xs text-green-700">
                            Revenue Entries
                          </p>
                          <p className="text-xs text-green-600">/ ∞</p>
                        </div>
                        <div className="text-center">
                          <p className="text-2xl font-bold text-green-600">0</p>
                          <p className="text-xs text-green-700">Cost Entries</p>
                          <p className="text-xs text-green-600">/ ∞</p>
                        </div>
                        <div className="text-center">
                          <p className="text-2xl font-bold text-green-600">0</p>
                          <p className="text-xs text-green-700">Reports</p>
                          <p className="text-xs text-green-600">/ ∞</p>
                        </div>
                      </div>
                    </div>

                    {/* Plan Features */}
                    <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                      <h4 className="font-medium text-blue-900 mb-3">
                        Plan Features
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                        {Array.isArray(subscription.plan.features?.features)
                          ? subscription.plan.features.features.map(
                              (feature: string, index: number) => (
                                <div
                                  key={index}
                                  className="flex items-center gap-2"
                                >
                                  <Check className="h-4 w-4 text-green-500 flex-shrink-0" />
                                  <span className="text-sm text-blue-800">
                                    {feature}
                                  </span>
                                </div>
                              )
                            )
                          : []}
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <div className="p-4 bg-gray-100 rounded-full w-20 h-20 mx-auto mb-4 flex items-center justify-center">
                      <Crown className="h-10 w-10 text-gray-400" />
                    </div>
                    <h3 className="text-xl font-semibold text-gray-900 mb-2">
                      No Active Subscription
                    </h3>
                    <p className="text-gray-600 mb-6 max-w-md mx-auto">
                      Get started with a plan to unlock all features and start
                      managing your business finances.
                    </p>
                    <Button
                      onClick={() => loadPlans()}
                      className="bg-blue-600 hover:bg-blue-700"
                    >
                      <Crown className="h-4 w-4 mr-2" />
                      Choose a Plan
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Available Plans */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <CreditCard className="h-5 w-5" />
                  Available Plans
                </CardTitle>
              </CardHeader>
              <CardContent>
                {plansLoading ? (
                  <div className="flex justify-center py-8">
                    <RefreshCw className="h-6 w-6 animate-spin text-gray-400" />
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {availablePlans.map((plan) => (
                      <div
                        key={plan.id}
                        className={`p-4 border rounded-lg ${
                          subscription?.plan.id === plan.id
                            ? "border-blue-500 bg-blue-50"
                            : "border-gray-200 hover:border-gray-300"
                        }`}
                      >
                        <div className="flex items-center justify-between mb-3">
                          <h3 className="font-semibold text-lg">{plan.name}</h3>
                          <div className="text-right">
                            <p className="text-2xl font-bold">
                              {plan.priceMonthly === 0
                                ? "Free"
                                : `${plan.priceMonthly} EGP`}
                            </p>
                            <p className="text-sm text-gray-500">/month</p>
                          </div>
                        </div>

                        <div className="space-y-2 mb-4 max-h-60 overflow-y-auto">
                          {(plan.features?.features || plan.features || []).map(
                            (feature: string, index: number) => (
                              <div
                                key={index}
                                className="flex items-start gap-2"
                              >
                                <Check className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                                <span className="text-sm text-gray-700 leading-relaxed">
                                  {feature}
                                </span>
                              </div>
                            )
                          )}
                        </div>

                        <Button
                          onClick={() => handlePlanChange(plan)}
                          disabled={
                            loading || subscription?.plan.id === plan.id
                          }
                          className="w-full"
                          variant={
                            subscription?.plan.id === plan.id
                              ? "outline"
                              : "default"
                          }
                        >
                          {loading ? (
                            <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                          ) : subscription?.plan.id === plan.id ? (
                            "Current Plan"
                          ) : (
                            <>
                              {getButtonLabel(plan)}
                              <Crown className="h-4 w-4 ml-2" />
                            </>
                          )}
                        </Button>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Billing History */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <CreditCard className="h-5 w-5" />
                  Billing History
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {/* Sample billing history - replace with real data */}
                  <div className="space-y-3">
                    {/* Current/Upcoming Invoice */}
                    <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium text-blue-900">
                            Upcoming Invoice
                          </h4>
                          <p className="text-sm text-blue-700">
                            {subscription?.currentPeriodEnd
                              ? new Date(
                                  subscription.currentPeriodEnd
                                ).toLocaleDateString()
                              : "No upcoming billing"}
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="font-bold text-blue-900">
                            {subscription?.plan?.priceMonthly === 0
                              ? "Free"
                              : `${subscription?.plan?.priceMonthly || 0} EGP`}
                          </p>
                          <p className="text-xs text-blue-600">Monthly Plan</p>
                        </div>
                      </div>
                    </div>

                    {/* Past Invoices */}
                    <div className="space-y-2">
                      <h5 className="font-medium text-gray-700 mb-3">
                        Past Invoices
                      </h5>

                      {/* Sample past invoices */}
                      <div className="p-3 bg-gray-50 rounded-lg border">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="font-medium text-gray-900">
                              Invoice #INV-2024-001
                            </p>
                            <p className="text-sm text-gray-600">
                              December 15, 2024
                            </p>
                          </div>
                          <div className="text-right">
                            <p className="font-medium text-gray-900">299 EGP</p>
                            <Badge variant="default" className="text-xs">
                              Paid
                            </Badge>
                          </div>
                        </div>
                      </div>

                      <div className="p-3 bg-gray-50 rounded-lg border">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="font-medium text-gray-900">
                              Invoice #INV-2024-002
                            </p>
                            <p className="text-sm text-gray-600">
                              November 15, 2024
                            </p>
                          </div>
                          <div className="text-right">
                            <p className="font-medium text-gray-900">299 EGP</p>
                            <Badge variant="default" className="text-xs">
                              Paid
                            </Badge>
                          </div>
                        </div>
                      </div>

                      <div className="p-3 bg-gray-50 rounded-lg border">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="font-medium text-gray-900">
                              Invoice #INV-2024-003
                            </p>
                            <p className="text-sm text-gray-600">
                              October 15, 2024
                            </p>
                          </div>
                          <div className="text-right">
                            <p className="font-medium text-gray-900">299 EGP</p>
                            <Badge variant="default" className="text-xs">
                              Paid
                            </Badge>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Download All Invoices Button */}
                    <div className="pt-4 border-t">
                      <Button variant="outline" className="w-full">
                        <Download className="h-4 w-4 mr-2" />
                        Download All Invoices
                      </Button>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Account Info Tab */}
          <TabsContent value="account" className="space-y-6">
            {/* Account Information */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <User className="h-5 w-5" />
                  Account Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="brandName">Brand Name</Label>
                    <Input
                      id="brandName"
                      value={settings.brandName}
                      onChange={(e) =>
                        setSettings((prev) => ({
                          ...prev,
                          brandName: e.target.value,
                        }))
                      }
                      placeholder="Enter your brand name"
                    />
                  </div>
                  <div>
                    <Label htmlFor="email">Email Address</Label>
                    <Input
                      id="email"
                      value={user?.email || ""}
                      disabled
                      className="bg-gray-50"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Contact support to change email address
                    </p>
                  </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="reportHeader">Report Header Text</Label>
                    <Input
                      id="reportHeader"
                      value={settings.reportHeader}
                      onChange={(e) =>
                        setSettings((prev) => ({
                          ...prev,
                          reportHeader: e.target.value,
                        }))
                      }
                      placeholder="Financial Report"
                    />
                  </div>
                  <div>
                    <Label htmlFor="reportFooter">Report Footer Text</Label>
                    <Input
                      id="reportFooter"
                      value={settings.reportFooter}
                      onChange={(e) =>
                        setSettings((prev) => ({
                          ...prev,
                          reportFooter: e.target.value,
                        }))
                      }
                      placeholder="Generated by Your Brand"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Actions */}
        <div className="flex justify-between items-center pt-4 border-t">
          <Button variant="outline" onClick={resetToDefaults}>
            <RefreshCw className="h-4 w-4 mr-2" />
            Reset to Defaults
          </Button>
          <div className="flex gap-2">
            <Button variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button onClick={saveSettings} disabled={loading}>
              {loading ? (
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <Save className="h-4 w-4 mr-2" />
              )}
              Save Settings
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default BrandSettings;
