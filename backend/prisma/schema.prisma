generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  passwordHash       String?
  firstName          String
  lastName           String
  emailVerified      Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  googleId           String?             @unique
  picture            String?
  auditLogs          AuditLog[]
  brandUsers         BrandUser[]
  brands             Brand[]
  costs              Cost[]
  inventory          Inventory[]
  invoices           Invoice[]
  payables           Payable[]
  projectTargets     ProjectTarget[]
  receivables        Receivable[]
  revenues           Revenue[]
  subscriptions      Subscription[]
  tasks              Task[]
  tickets            Ticket[]
  transfers          Transfer[]
  usageTracking      UsageTracking[]
  sessions           Session[]
  walletTransactions WalletTransaction[]
  wallets            Wallet[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Plan {
  id            String         @id @default(cuid())
  name          String
  priceMonthly  Float
  priceYearly   Float
  features      Json
  maxBrands     Int
  maxUsers      Int
  trialDays     Int            @default(7)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String
  planId               String
  status               String
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  stripeSubscriptionId String?   @unique
  stripeCustomerId     String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  cancelAtPeriodEnd    Boolean   @default(false)
  cancelledAt          DateTime?
  paymentMethod        String    @default("mock")
  trialEnd             DateTime?
  trialStart           DateTime?
  invoices             Invoice[]
  plan                 Plan      @relation(fields: [planId], references: [id])
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Invoice {
  id              String       @id @default(cuid())
  subscriptionId  String
  amount          Float
  currency        String       @default("EGP")
  status          String
  stripeInvoiceId String?      @unique
  dueDate         DateTime?
  paidAt          DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  description     String?
  invoiceNumber   String?      @unique
  userId          String
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model Brand {
  id                 String              @id @default(cuid())
  userId             String
  name               String
  logoUrl            String?
  settings           Json                @default("{}")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  auditLogs          AuditLog[]
  bostaImports       BostaImport[]
  brandUsers         BrandUser[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories         Category[]
  costs              Cost[]
  financialReports   FinancialReport[]
  inventory          Inventory[]
  payables           Payable[]
  projectTargets     ProjectTarget[]
  receivables        Receivable[]
  revenues           Revenue[]
  tasks              Task[]
  teamMembers        TeamMember[]
  transfers          Transfer[]
  usageTracking      UsageTracking[]
  walletTransactions WalletTransaction[]
  wallets            Wallet[]

  @@map("brands")
}

model BrandUser {
  id          String    @id @default(cuid())
  brandId     String
  userId      String
  role        String
  permissions Json      @default("[]")
  invitedAt   DateTime  @default(now())
  acceptedAt  DateTime?
  brand       Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([brandId, userId])
  @@map("brand_users")
}

model Receivable {
  id                   String   @id @default(cuid())
  brandId              String
  entityName           String
  amount               Float
  dueDate              DateTime
  status               String
  description          String?
  invoiceNumber        String?
  receiptUrl           String?
  createdBy            String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  autoConvertToRevenue Boolean  @default(false)
  brand                Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  creator              User     @relation(fields: [createdBy], references: [id])

  @@map("receivables")
}

model Payable {
  id                String   @id @default(cuid())
  brandId           String
  entityName        String
  amount            Float
  dueDate           DateTime
  status            String
  description       String?
  invoiceNumber     String?
  receiptUrl        String?
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  autoConvertToCost Boolean  @default(false)
  brand             Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  creator           User     @relation(fields: [createdBy], references: [id])

  @@map("payables")
}

model Category {
  id        String   @id @default(cuid())
  brandId   String
  name      String
  color     String   @default("bg-blue-100 text-blue-800")
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("categories")
}

model Revenue {
  id              String         @id @default(cuid())
  brandId         String
  name            String
  amount          Float
  category        String
  date            DateTime
  source          String
  receiptUrl      String?
  createdBy       String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  bostaImportId   String?
  bostaShipmentId String?
  bostaImport     BostaImport?   @relation(fields: [bostaImportId], references: [id])
  bostaShipment   BostaShipment? @relation(fields: [bostaShipmentId], references: [id])
  brand           Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  creator         User           @relation(fields: [createdBy], references: [id])

  @@map("revenues")
}

model Cost {
  id         String   @id @default(cuid())
  brandId    String
  name       String
  amount     Float
  category   String
  date       DateTime
  vendor     String
  receiptUrl String?
  createdBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  costType   String   @default("variable")
  brand      Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  creator    User     @relation(fields: [createdBy], references: [id])

  @@map("costs")
}

model Transfer {
  id              String   @id @default(cuid())
  brandId         String
  type            String
  fromLocation    String?
  toLocation      String
  quantity        Int
  description     String?
  transferDate    DateTime
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deductFromStock Boolean  @default(false)
  inventoryItemId String?
  brand           Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  creator         User     @relation(fields: [createdBy], references: [id])

  @@map("transfers")
}

model Wallet {
  id               String              @id @default(cuid())
  brandId          String
  name             String
  balance          Float               @default(0)
  type             String
  currency         String              @default("EGP")
  color            String              @default("bg-gradient-to-br from-gray-800 to-gray-900")
  createdBy        String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  fromTransactions WalletTransaction[] @relation("FromWallet")
  toTransactions   WalletTransaction[] @relation("ToWallet")
  transactions     WalletTransaction[]
  brand            Brand               @relation(fields: [brandId], references: [id], onDelete: Cascade)
  creator          User                @relation(fields: [createdBy], references: [id])

  @@map("wallets")
}

model WalletTransaction {
  id             String   @id @default(cuid())
  brandId        String
  walletId       String?
  type           String
  fromWalletId   String?
  toWalletId     String?
  amount         Float
  description    String?
  date           DateTime
  status         String   @default("completed")
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  category       String?
  countAsCost    Boolean  @default(false)
  countAsRevenue Boolean  @default(false)
  brand          Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  creator        User     @relation(fields: [createdBy], references: [id])
  fromWallet     Wallet?  @relation("FromWallet", fields: [fromWalletId], references: [id])
  toWallet       Wallet?  @relation("ToWallet", fields: [toWalletId], references: [id])
  wallet         Wallet?  @relation(fields: [walletId], references: [id])

  @@map("wallet_transactions")
}

model Inventory {
  id           String   @id @default(cuid())
  brandId      String
  productName  String
  category     String
  status       String   @default("in-stock")
  description  String?
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  baseSku      String
  colors       String[] @default([])
  currentStock Int      @default(0)
  location     String?
  reorderLevel Int      @default(0)
  sellingPrice Float    @default(0)
  sizes        String[] @default([])
  supplier     String?
  unitCost     Float    @default(0)
  brand        Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  creator      User     @relation(fields: [createdBy], references: [id])

  @@map("inventory")
}

model ProjectTarget {
  id            String   @id @default(cuid())
  brandId       String
  name          String
  goal          String
  targetPieces  Int
  currentPieces Int      @default(0)
  category      String
  deadline      DateTime
  status        String
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  brand         Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  creator       User     @relation(fields: [createdBy], references: [id])

  @@map("project_targets")
}

model Task {
  id          String    @id @default(cuid())
  brandId     String
  title       String
  description String?
  assignedTo  String?
  dueDate     DateTime?
  status      String
  priority    String
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    String?
  brand       Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  creator     User      @relation(fields: [createdBy], references: [id])

  @@map("tasks")
}

model TeamMember {
  id          String   @id @default(cuid())
  brandId     String
  userId      String
  role        String
  permissions Json     @default("[]")
  joinedAt    DateTime @default(now())
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([brandId, userId])
  @@map("team_members")
}

model FinancialReport {
  id          String   @id @default(cuid())
  brandId     String
  reportType  String
  data        Json
  generatedAt DateTime @default(now())
  createdBy   String
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("financial_reports")
}

model Admin {
  id              String           @id @default(cuid())
  email           String           @unique
  passwordHash    String
  firstName       String
  lastName        String
  role            String           @default("admin")
  permissions     Json             @default("[]")
  isActive        Boolean          @default(true)
  lastLoginAt     DateTime?
  loginAttempts   Int              @default(0)
  lockedUntil     DateTime?
  ipWhitelist     String[]         @default([])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  sessions        AdminSession[]
  auditLogs       AuditLog[]
  ticketResponses TicketResponse[]
  assignedTickets Ticket[]

  @@map("admins")
}

model AdminSession {
  id        String   @id @default(cuid())
  adminId   String
  token     String   @unique
  ipAddress String
  userAgent String
  expiresAt DateTime
  createdAt DateTime @default(now())
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_sessions")
}

model SystemMetrics {
  id                  String   @id @default(cuid())
  date                DateTime @default(now())
  totalUsers          Int
  totalBrands         Int
  activeSubscriptions Int
  totalRevenue        Float
  totalCosts          Float
  apiCalls            Int
  errorCount          Int
  createdAt           DateTime @default(now())

  @@map("system_metrics")
}

model AuditLog {
  id        String   @id @default(cuid())
  brandId   String?
  userId    String
  action    String
  tableName String
  recordId  String?
  oldValues Json?
  newValues Json?
  createdAt DateTime @default(now())
  adminId   String?
  admin     Admin?   @relation(fields: [adminId], references: [id])
  brand     Brand?   @relation(fields: [brandId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model BostaImport {
  id           String          @id @default(cuid())
  brandId      String
  fileName     String
  totalOrders  Int
  expectedCash Float
  delivered    Int
  returned     Int
  returnRate   Float
  deliveryRate Float
  processedAt  DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  brand        Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  shipments    BostaShipment[]
  revenues     Revenue[]

  @@map("bosta_imports")
}

model BostaShipment {
  id                   String      @id @default(cuid())
  trackingNumber       String
  codAmount            Float       @default(0)
  businessReference    String?
  deliveredAt          DateTime?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  bostaImportId        String
  consigneeName        String?
  consigneePhone       String?
  deliveryState        String
  description          String?
  dropOffCity          String?
  dropOffFirstLine     String?
  expectedDeliveryDate DateTime?
  isDelivered          Boolean     @default(false)
  isReturned           Boolean     @default(false)
  numberOfAttempts     Int?
  originalCreatedAt    DateTime?
  originalUpdatedAt    DateTime?
  revenueCreated       Boolean     @default(false)
  sku                  String?
  type                 String?
  import               BostaImport @relation(fields: [bostaImportId], references: [id], onDelete: Cascade)
  revenues             Revenue[]

  @@map("bosta_shipments")
}

model Ticket {
  id           String           @id @default(cuid())
  ticketId     String           @unique
  fullName     String
  email        String
  category     String
  subject      String
  description  String
  status       String           @default("Open")
  priority     String           @default("Medium")
  attachments  Json             @default("[]")
  assignedToId String?
  userId       String?
  resolvedAt   DateTime?
  closedAt     DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  responses    TicketResponse[]
  assignedTo   Admin?           @relation(fields: [assignedToId], references: [id])
  user         User?            @relation(fields: [userId], references: [id])

  @@map("tickets")
}

model TicketResponse {
  id          String   @id @default(cuid())
  ticketId    String
  message     String
  isInternal  Boolean  @default(false)
  isFromAdmin Boolean  @default(false)
  authorId    String?
  authorName  String
  authorEmail String?
  attachments Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      Admin?   @relation(fields: [authorId], references: [id])
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_responses")
}

model UsageTracking {
  id           String   @id @default(cuid())
  userId       String
  brandId      String
  resourceType String
  currentCount Int      @default(0)
  limit        Int      @default(-1)
  lastUpdated  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  brand        Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, brandId, resourceType])
  @@map("usage_tracking")
}
