import { PrismaClient } from "@prisma/client";
import { CreateBrandSettingsDto, UpdateBrandSettingsDto } from "@/types";

const prisma = new PrismaClient();

export class BrandSettingsService {
  // Get brand settings
  static async getBrandSettings(brandId: string) {
    try {
      const brand = await prisma.brand.findUnique({
        where: { id: brandId },
        select: {
          id: true,
          name: true,
          logoUrl: true,
          settings: true,
          createdAt: true,
          updatedAt: true,
        },
      });

      if (!brand) {
        throw new Error("Brand not found");
      }

      // Parse settings JSON or return default
      const settings =
        typeof brand.settings === "string"
          ? JSON.parse(brand.settings)
          : brand.settings || {};

      return {
        ...brand,
        settings: {
          // Default settings
          primaryColor: "#3B82F6",
          secondaryColor: "#1E40AF",
          accentColor: "#10B981",
          brandName: brand.name,
          reportHeader: "Financial Report",
          reportFooter: "Generated by Your Brand Management System",
          currency: "EGP",
          dateFormat: "DD/MM/YYYY",
          timezone: "Africa/Cairo",
          language: "en",
          notifications: {
            email: true,
            push: true,
            sms: false,
          },
          integrations: {
            shopify: {
              enabled: false,
              shopDomain: "",
              accessToken: "",
            },
            stripe: {
              enabled: false,
              publishableKey: "",
              secretKey: "",
            },
          },
          // Override with saved settings
          ...settings,
        },
      };
    } catch (error) {
      throw error;
    }
  }

  // Update brand settings
  static async updateBrandSettings(
    brandId: string,
    settingsData: UpdateBrandSettingsDto
  ) {
    try {
      // Get current brand
      const brand = await prisma.brand.findUnique({
        where: { id: brandId },
        select: { settings: true, name: true },
      });

      if (!brand) {
        throw new Error("Brand not found");
      }

      // Parse current settings
      const currentSettings =
        typeof brand.settings === "string"
          ? JSON.parse(brand.settings)
          : brand.settings || {};

      // Merge with new settings
      const updatedSettings = {
        ...currentSettings,
        ...settingsData,
      };

      // Update brand with new settings
      const updatedBrand = await prisma.brand.update({
        where: { id: brandId },
        data: {
          settings: updatedSettings,
          // Update brand name if provided
          ...(settingsData.brandName && { name: settingsData.brandName }),
        },
        select: {
          id: true,
          name: true,
          logoUrl: true,
          settings: true,
          updatedAt: true,
        },
      });

      return {
        ...updatedBrand,
        settings: updatedSettings,
      };
    } catch (error) {
      throw error;
    }
  }

  // Update brand logo
  static async updateBrandLogo(brandId: string, logoUrl: string) {
    try {
      const updatedBrand = await prisma.brand.update({
        where: { id: brandId },
        data: { logoUrl },
        select: {
          id: true,
          name: true,
          logoUrl: true,
          updatedAt: true,
        },
      });

      return updatedBrand;
    } catch (error) {
      throw error;
    }
  }

  // Reset brand settings to defaults
  static async resetBrandSettings(brandId: string) {
    try {
      const defaultSettings = {
        primaryColor: "#3B82F6",
        secondaryColor: "#1E40AF",
        accentColor: "#10B981",
        reportHeader: "Financial Report",
        reportFooter: "Generated by Your Brand Management System",
        currency: "EGP",
        dateFormat: "DD/MM/YYYY",
        timezone: "Africa/Cairo",
        language: "en",
        notifications: {
          email: true,
          push: true,
          sms: false,
        },
        integrations: {
          shopify: {
            enabled: false,
            shopDomain: "",
            accessToken: "",
          },
          stripe: {
            enabled: false,
            publishableKey: "",
            secretKey: "",
          },
        },
      };

      const updatedBrand = await prisma.brand.update({
        where: { id: brandId },
        data: { settings: defaultSettings },
        select: {
          id: true,
          name: true,
          logoUrl: true,
          settings: true,
          updatedAt: true,
        },
      });

      return {
        ...updatedBrand,
        settings: defaultSettings,
      };
    } catch (error) {
      throw error;
    }
  }
}
